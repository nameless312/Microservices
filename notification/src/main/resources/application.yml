server:
  port: 8082
spring:
  application:
    name: notification
  datasource:
    password: password
    url: jdbc:postgresql://localhost:5432/notification
    username: nameless
  jpa:
    hibernate:
      ddl-auto: create-drop
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
    show-sql: true
  rabbitmq:
    addresses: localhost:5672
  mail:
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
  kafka:
    consumer:
      bootstrap-servers: localhost:9092
      group-id: notifications
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: org.nameless.*
kafka:
  server: localhost:9092
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka
    fetch-registry: true
    register-with-eureka: true
logging:
  pattern:
    level: '%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]'
  file:
    name: /tmp/logs/notification/${spring.application.name}-log
management:
  tracing:
    sampling:
      probability: 1.0
rabbitmq:
  exchanges:
    internal: internal.exchange
  queues:
    notification: notification.queue
  routing-keys:
    internal-notification: internal.notification.routing-key