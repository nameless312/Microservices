services:
  postgres:
    container_name: postgres
    image: postgres
    environment:
      POSTGRES_USER: nameless
      POSTGRES_PASSWORD: password
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - postgres
    restart: unless-stopped

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - postgres
    restart: unless-stopped

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - spring

  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - spring

  eureka-server:
    image: nameless312/eureka-server:latest
    container_name: eureka-server
    ports:
      - "8761:8761"
    depends_on:
      - zipkin
    networks:
      - spring
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    volumes:
      - logs:/logs/eureka

  api-gateway:
    image: nameless312/api-gateway:latest
    container_name: api-gateway
    ports:
      - "8083:8083"
    depends_on:
      - zipkin
      - eureka-server
    networks:
      - spring
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    volumes:
      - logs:/logs/gateway

  customer:
    image: nameless312/customer:latest
    container_name: customer
    ports:
      - "8080:8080"
    depends_on:
      - zipkin
      - eureka-server
      - postgres
      - rabbitmq
      - kafka1
    networks:
      - spring
      - postgres
      - kafka
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    volumes:
      - logs:/logs/customer

  fraud:
    image: nameless312/fraud:latest
    container_name: fraud
    ports:
      - "8081:8081"
    depends_on:
      - zipkin
      - eureka-server
      - postgres
      - rabbitmq
    networks:
      - spring
      - postgres
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    volumes:
      - logs:/logs/fraud

  notification:
    image: nameless312/notification:latest
    container_name: notification
    ports:
      - "8082:8082"
    depends_on:
      - zipkin
      - eureka-server
      - postgres
      - rabbitmq
      - kafka1
    networks:
      - spring
      - postgres
      - kafka
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    volumes:
      - logs:/logs/notification

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.2
    container_name: elasticsearch
    environment:
      - node.name=elasticsearch
      - discovery.type=single-node
      - cluster.name=es-docker-cluster
      - xpack.license.self_generated.type=trial
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=/usr/share/elasticsearch/config/es03.key
      - xpack.security.http.ssl.certificate_authorities=/usr/share/elasticsearch/config/rootCA.pem
      - xpack.security.http.ssl.certificate=/usr/share/elasticsearch/config/es01.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.certificate_authorities=/usr/share/elasticsearch/config/rootCA.pem
      - xpack.security.transport.ssl.certificate=/usr/share/elasticsearch/config/es01.crt
      - xpack.security.transport.ssl.key=/usr/share/elasticsearch/config/es01.key
    volumes:
      - data:/usr/share/elasticsearch/data
      - ./elk/certs/es01.crt:/usr/share/elasticsearch/config/es01.crt
      - ./elk/certs/es01.key:/usr/share/elasticsearch/config/es01.key
      - ./elk/certs/rootCA.pem:/usr/share/elasticsearch/config/rootCA.pem
    ports:
      - "9200:9200"
    networks:
      - elk

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.2
    container_name: logstash
    command: logstash -f /usr/share/logstash/pipeline/logstash.conf
    volumes:
      - ./elk/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - logs:/logs
    ports:
      - "5000:5000"
    networks:
      - elk
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.2
    container_name: kibana
    environment:
      - node.name=kibana
      - cluster.name=es-docker-cluster
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=/usr/share/kibana/config/rootCA.pem
      - SERVER_SSL_ENABLED=true
      - SERVER_SSL_KEY=/usr/share/kibana/config/kib01.key
      - SERVER_SSL_CERTIFICATE=/usr/share/kibana/config/kib01.crt
    ports:
      - "5601:5601"
    volumes:
      - ./elk/certs/kib01.crt:/usr/share/kibana/config/kib01.crt
      - ./elk/certs/kib01.key:/usr/share/kibana/config/kib01.key
      - ./elk/certs/rootCA.pem:/usr/share/kibana/config/rootCA.pem
    networks:
      - elk
    depends_on:
      - elasticsearch

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.3
    restart: always
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: "2181"
    ports:
      - "2181:2181"
    networks:
      - kafka

  kafka1:
    image: confluentinc/cp-enterprise-kafka:7.5.3
    depends_on:
      - zookeeper
    ports:
      # Exposes 29092 for external connections to the broker
      # Use kafka1:9092 for connections internal on the docker network
      # See https://rmoff.net/2018/08/02/kafka-listeners-explained/ for details
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:29092,PLAINTEXT_HOST://localhost:9092
      #KAFKA_LOG4J_ROOT_LOGLEVEL: INFO
      KAFKA_BROKER_ID: 1
      KAFKA_BROKER_RACK: "r1"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_JMX_PORT: 9991
    networks:
      - kafka


networks:
  postgres:
    driver: bridge
  spring:
    driver: bridge
  elk:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
  kafka:
    driver: bridge

volumes:
  postgres:
  pgadmin:
  logs:
  data:
    driver: local